// Code generated by protoc-gen-go. DO NOT EDIT.
// source: google/ads/googleads/v2/resources/keyword_plan_ad_group.proto

package resources

import (
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	_ "google.golang.org/genproto/googleapis/api/annotations"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// A Keyword Planner ad group.
// Max number of keyword plan ad groups per plan: 200.
type KeywordPlanAdGroup struct {
	// The resource name of the Keyword Planner ad group.
	// KeywordPlanAdGroup resource names have the form:
	//
	// `customers/{customer_id}/keywordPlanAdGroups/{kp_ad_group_id}`
	ResourceName string `protobuf:"bytes,1,opt,name=resource_name,json=resourceName,proto3" json:"resource_name,omitempty"`
	// The keyword plan campaign to which this ad group belongs.
	KeywordPlanCampaign *wrappers.StringValue `protobuf:"bytes,2,opt,name=keyword_plan_campaign,json=keywordPlanCampaign,proto3" json:"keyword_plan_campaign,omitempty"`
	// The ID of the keyword plan ad group.
	Id *wrappers.Int64Value `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	// The name of the keyword plan ad group.
	//
	// This field is required and should not be empty when creating keyword plan
	// ad group.
	Name *wrappers.StringValue `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// A default ad group max cpc bid in micros in account currency for all
	// biddable keywords under the keyword plan ad group.
	// If not set, will inherit from parent campaign.
	CpcBidMicros         *wrappers.Int64Value `protobuf:"bytes,5,opt,name=cpc_bid_micros,json=cpcBidMicros,proto3" json:"cpc_bid_micros,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *KeywordPlanAdGroup) Reset()         { *m = KeywordPlanAdGroup{} }
func (m *KeywordPlanAdGroup) String() string { return proto.CompactTextString(m) }
func (*KeywordPlanAdGroup) ProtoMessage()    {}
func (*KeywordPlanAdGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f1a03c968ccbc2a, []int{0}
}

func (m *KeywordPlanAdGroup) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KeywordPlanAdGroup.Unmarshal(m, b)
}
func (m *KeywordPlanAdGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KeywordPlanAdGroup.Marshal(b, m, deterministic)
}
func (m *KeywordPlanAdGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeywordPlanAdGroup.Merge(m, src)
}
func (m *KeywordPlanAdGroup) XXX_Size() int {
	return xxx_messageInfo_KeywordPlanAdGroup.Size(m)
}
func (m *KeywordPlanAdGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_KeywordPlanAdGroup.DiscardUnknown(m)
}

var xxx_messageInfo_KeywordPlanAdGroup proto.InternalMessageInfo

func (m *KeywordPlanAdGroup) GetResourceName() string {
	if m != nil {
		return m.ResourceName
	}
	return ""
}

func (m *KeywordPlanAdGroup) GetKeywordPlanCampaign() *wrappers.StringValue {
	if m != nil {
		return m.KeywordPlanCampaign
	}
	return nil
}

func (m *KeywordPlanAdGroup) GetId() *wrappers.Int64Value {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *KeywordPlanAdGroup) GetName() *wrappers.StringValue {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *KeywordPlanAdGroup) GetCpcBidMicros() *wrappers.Int64Value {
	if m != nil {
		return m.CpcBidMicros
	}
	return nil
}

func init() {
	proto.RegisterType((*KeywordPlanAdGroup)(nil), "google.ads.googleads.v2.resources.KeywordPlanAdGroup")
}

func init() {
	proto.RegisterFile("google/ads/googleads/v2/resources/keyword_plan_ad_group.proto", fileDescriptor_3f1a03c968ccbc2a)
}

var fileDescriptor_3f1a03c968ccbc2a = []byte{
	// 398 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xc1, 0xaa, 0xd4, 0x30,
	0x18, 0x85, 0x69, 0xee, 0x55, 0x30, 0x5e, 0x5d, 0x54, 0xc4, 0x72, 0xbd, 0xc8, 0x8c, 0x32, 0x30,
	0x20, 0xa4, 0x52, 0xc5, 0x45, 0xc4, 0x45, 0xc7, 0xc5, 0xa0, 0xa2, 0x94, 0x11, 0xba, 0x90, 0x42,
	0xc9, 0x24, 0x31, 0x84, 0x69, 0x93, 0x90, 0xb4, 0x33, 0xb8, 0xf7, 0x49, 0x5c, 0x0a, 0xbe, 0x88,
	0x8f, 0xe2, 0x53, 0x48, 0x9b, 0xb6, 0x22, 0x03, 0xce, 0xdd, 0x1d, 0xfa, 0x9f, 0xef, 0x3f, 0x87,
	0xe6, 0x87, 0xaf, 0x85, 0xd6, 0xa2, 0xe2, 0x31, 0x61, 0x2e, 0xf6, 0xb2, 0x53, 0xfb, 0x24, 0xb6,
	0xdc, 0xe9, 0xd6, 0x52, 0xee, 0xe2, 0x1d, 0xff, 0x7a, 0xd0, 0x96, 0x95, 0xa6, 0x22, 0xaa, 0x24,
	0xac, 0x14, 0x56, 0xb7, 0x06, 0x19, 0xab, 0x1b, 0x1d, 0xce, 0x3d, 0x83, 0x08, 0x73, 0x68, 0xc2,
	0xd1, 0x3e, 0x41, 0x13, 0x7e, 0xf9, 0x68, 0x48, 0xe8, 0x81, 0x6d, 0xfb, 0x25, 0x3e, 0x58, 0x62,
	0x0c, 0xb7, 0xce, 0xaf, 0xb8, 0xbc, 0x1a, 0x1b, 0x18, 0x19, 0x13, 0xa5, 0x74, 0x43, 0x1a, 0xa9,
	0xd5, 0x30, 0x7d, 0xfc, 0x13, 0xc0, 0xf0, 0xbd, 0x2f, 0x90, 0x55, 0x44, 0xa5, 0x6c, 0xdd, 0xa5,
	0x87, 0x4f, 0xe0, 0x9d, 0x31, 0xa1, 0x54, 0xa4, 0xe6, 0x51, 0x30, 0x0b, 0x96, 0xb7, 0x36, 0x17,
	0xe3, 0xc7, 0x8f, 0xa4, 0xe6, 0x61, 0x06, 0xef, 0xff, 0xd3, 0x9d, 0x92, 0xda, 0x10, 0x29, 0x54,
	0x04, 0x66, 0xc1, 0xf2, 0x76, 0x72, 0x35, 0x34, 0x46, 0x63, 0x33, 0xf4, 0xa9, 0xb1, 0x52, 0x89,
	0x9c, 0x54, 0x2d, 0xdf, 0xdc, 0xdb, 0xfd, 0x4d, 0x7d, 0x33, 0x80, 0xe1, 0x53, 0x08, 0x24, 0x8b,
	0xce, 0x7a, 0xfc, 0xe1, 0x11, 0xfe, 0x56, 0x35, 0x2f, 0x5f, 0x78, 0x1a, 0x48, 0x16, 0x3e, 0x83,
	0xe7, 0x7d, 0xb5, 0xf3, 0x6b, 0xa4, 0xf5, 0xce, 0x30, 0x85, 0x77, 0xa9, 0xa1, 0xe5, 0x56, 0xb2,
	0xb2, 0x96, 0xd4, 0x6a, 0x17, 0xdd, 0x38, 0x1d, 0x75, 0x41, 0x0d, 0x5d, 0x49, 0xf6, 0xa1, 0x07,
	0x56, 0xdf, 0x00, 0x5c, 0x50, 0x5d, 0xa3, 0x93, 0xef, 0xb2, 0x7a, 0x70, 0xfc, 0x5b, 0xb3, 0x6e,
	0x7d, 0x16, 0x7c, 0x7e, 0x37, 0xd0, 0x42, 0x57, 0x44, 0x09, 0xa4, 0xad, 0x88, 0x05, 0x57, 0x7d,
	0xf8, 0x78, 0x24, 0x46, 0xba, 0xff, 0xdc, 0xcc, 0xab, 0x49, 0x7d, 0x07, 0x67, 0xeb, 0x34, 0xfd,
	0x01, 0xe6, 0x6b, 0xbf, 0x32, 0x65, 0x0e, 0x79, 0xd9, 0xa9, 0x3c, 0x41, 0x9b, 0xd1, 0xf9, 0x6b,
	0xf4, 0x14, 0x29, 0x73, 0xc5, 0xe4, 0x29, 0xf2, 0xa4, 0x98, 0x3c, 0xbf, 0xc1, 0xc2, 0x0f, 0x30,
	0x4e, 0x99, 0xc3, 0x78, 0x72, 0x61, 0x9c, 0x27, 0x18, 0x4f, 0xbe, 0xed, 0xcd, 0xbe, 0xec, 0xf3,
	0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xd8, 0x58, 0x2e, 0x0c, 0xdf, 0x02, 0x00, 0x00,
}
