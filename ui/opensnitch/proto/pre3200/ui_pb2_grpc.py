# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from . import ui_pb2 as ui__pb2


class UIStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Ping = channel.unary_unary(
        '/protocol.UI/Ping',
        request_serializer=ui__pb2.PingRequest.SerializeToString,
        response_deserializer=ui__pb2.PingReply.FromString,
        )
    self.AskRule = channel.unary_unary(
        '/protocol.UI/AskRule',
        request_serializer=ui__pb2.Connection.SerializeToString,
        response_deserializer=ui__pb2.Rule.FromString,
        )
    self.Subscribe = channel.unary_unary(
        '/protocol.UI/Subscribe',
        request_serializer=ui__pb2.ClientConfig.SerializeToString,
        response_deserializer=ui__pb2.ClientConfig.FromString,
        )
    self.Notifications = channel.stream_stream(
        '/protocol.UI/Notifications',
        request_serializer=ui__pb2.NotificationReply.SerializeToString,
        response_deserializer=ui__pb2.Notification.FromString,
        )
    self.PostAlert = channel.unary_unary(
        '/protocol.UI/PostAlert',
        request_serializer=ui__pb2.Alert.SerializeToString,
        response_deserializer=ui__pb2.MsgResponse.FromString,
        )


class UIServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def Ping(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def AskRule(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Subscribe(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Notifications(self, request_iterator, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def PostAlert(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_UIServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Ping': grpc.unary_unary_rpc_method_handler(
          servicer.Ping,
          request_deserializer=ui__pb2.PingRequest.FromString,
          response_serializer=ui__pb2.PingReply.SerializeToString,
      ),
      'AskRule': grpc.unary_unary_rpc_method_handler(
          servicer.AskRule,
          request_deserializer=ui__pb2.Connection.FromString,
          response_serializer=ui__pb2.Rule.SerializeToString,
      ),
      'Subscribe': grpc.unary_unary_rpc_method_handler(
          servicer.Subscribe,
          request_deserializer=ui__pb2.ClientConfig.FromString,
          response_serializer=ui__pb2.ClientConfig.SerializeToString,
      ),
      'Notifications': grpc.stream_stream_rpc_method_handler(
          servicer.Notifications,
          request_deserializer=ui__pb2.NotificationReply.FromString,
          response_serializer=ui__pb2.Notification.SerializeToString,
      ),
      'PostAlert': grpc.unary_unary_rpc_method_handler(
          servicer.PostAlert,
          request_deserializer=ui__pb2.Alert.FromString,
          response_serializer=ui__pb2.MsgResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'protocol.UI', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
